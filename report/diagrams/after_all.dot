digraph G {
    ranksep=1;
    node [shape=record];
    subgraph cluster_root {
    label="root";
    subgraph cluster_file_transfer_protocol {
    label="file_transfer_protocol";
    "__init__.py" [label="{__init__.py|\l|}"];
"ftp_send_receive.py" [label="{ftp_send_receive.py|\l|+ main()\l+ ReceiveFile(ftp)\l+ SendFile(ftp)\l}"];
"ftp_client_server.py" [label="{ftp_client_server.py|\l|+ main()\l}"];
}

subgraph cluster_searches {
    label="searches";
    "sentinel_linear_search.py" [label="{sentinel_linear_search.py|\l|+ sentinel_linear_search(sequence, target)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"tabu_search.py" [label="{tabu_search.py|\l|+ generate_neighbours(path)\l+ generate_first_solution(path, dict_of_neighbours)\l+ find_neighborhood(solution, dict_of_neighbours)\l+ tabu_search(first_solution, distance_of_first_solution, dict_of_neighbours, iters, size)\l+ main(args)\l}"];
"ternary_search.py" [label="{ternary_search.py|+ precision\l\l|+ lin_search(left, right, A, target)\l+ ite_ternary_search(A, target)\l+ rec_ternary_search(left, right, A, target)\l+ __assert_sorted(collection)\l}"];
"linear_search.py" [label="{linear_search.py|\l|+ linear_search(sequence, target)\l}"];
"interpolation_search.py" [label="{interpolation_search.py|\l|+ interpolation_search(sorted_collection, item)\l+ interpolation_search_by_recursion(sorted_collection, item, left, right)\l+ __assert_sorted(collection)\l}"];
"jump_search.py" [label="{jump_search.py|\l|+ jump_search(arr, x)\l+ main()\l}"];
"quick_select.py" [label="{quick_select.py|\l|+ _partition(data, pivot)\l+ quickSelect(list, k)\l}"];
"binary_search.py" [label="{binary_search.py|\l|+ binary_search(sorted_collection, item)\l+ binary_search_std_lib(sorted_collection, item)\l+ binary_search_by_recursion(sorted_collection, item, left, right)\l+ __assert_sorted(collection)\l}"];
}

subgraph cluster_digital_image_processing {
    label="digital_image_processing";
    subgraph cluster_filters {
    label="filters";
    "__init__.py" [label="{__init__.py|\l|}"];
"median_filter.py" [label="{median_filter.py|\l|+ median_filter(gray_img, mask)\l}"];
}

"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_project_euler {
    label="project_euler";
    subgraph cluster_problem_11 {
    label="problem_11";
    "sol1.py" [label="{sol1.py|\l|+ largest_product(grid)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ main()\l}"];
}

subgraph cluster_problem_48 {
    label="problem_48";
    "sol1.py" [label="{sol1.py|+ total\l\l|}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_08 {
    label="problem_08";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ main()\l}"];
}

subgraph cluster_problem_07 {
    label="problem_07";
    "sol1.py" [label="{sol1.py|\l|+ isprime(n)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol3.py" [label="{sol3.py|\l|+ primeCheck(number)\l+ prime_generator()\l+ main()\l}"];
"sol2.py" [label="{sol2.py|\l|+ isprime(number)\l+ main()\l}"];
}

subgraph cluster_problem_02 {
    label="problem_02";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol3.py" [label="{sol3.py|\l|+ main()\l}"];
"sol2.py" [label="{sol2.py|\l|+ fib(n)\l}"];
}

subgraph cluster_problem_19 {
    label="problem_19";
    "sol1.py" [label="{sol1.py|+ days_per_month\l+ day\l+ month\l+ year\l+ sundays\l\l|}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_22 {
    label="problem_22";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ main()\l}"];
}

subgraph cluster_problem_13 {
    label="problem_13";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_16 {
    label="problem_16";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_24 {
    label="problem_24";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_21 {
    label="problem_21";
    "sol1.py" [label="{sol1.py|+ sums\l+ total\l\l|+ sum_of_divisors(n)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_20 {
    label="problem_20";
    "sol1.py" [label="{sol1.py|\l|+ factorial(n)\l+ split_and_add(number)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ main()\l}"];
}

subgraph cluster_problem_25 {
    label="problem_25";
    "sol1.py" [label="{sol1.py|\l|+ fibonacci(n)\l+ fibonacci_digits_index(n)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|+ answer\l+ gen\l\l|+ fibonacci_genrator()\l}"];
}

subgraph cluster_problem_14 {
    label="problem_14";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ collatz_sequence(n)\l+ main()\l}"];
}

subgraph cluster_problem_52 {
    label="problem_52";
    "sol1.py" [label="{sol1.py|+ i\l\l|}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_03 {
    label="problem_03";
    "sol1.py" [label="{sol1.py|\l|+ isprime(no)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ main()\l}"];
}

subgraph cluster_problem_31 {
    label="problem_31";
    "sol1.py" [label="{sol1.py|\l|+ one_pence()\l+ two_pence(x)\l+ five_pence(x)\l+ ten_pence(x)\l+ twenty_pence(x)\l+ fifty_pence(x)\l+ one_pound(x)\l+ two_pound(x)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_09 {
    label="problem_09";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol3.py" [label="{sol3.py|\l|+ main()\l}"];
"sol2.py" [label="{sol2.py|\l|+ main()\l}"];
}

subgraph cluster_problem_12 {
    label="problem_12";
    "sol1.py" [label="{sol1.py|\l|+ count_divisors(n)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ triangle_number_generator()\l+ count_divisors(n)\l+ main()\l}"];
}

subgraph cluster_problem_76 {
    label="problem_76";
    "sol1.py" [label="{sol1.py|\l|+ partition(m)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_06 {
    label="problem_06";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol3.py" [label="{sol3.py|\l|+ problem6(number)\l+ main()\l}"];
"sol2.py" [label="{sol2.py|\l|+ main()\l}"];
}

subgraph cluster_problem_53 {
    label="problem_53";
    "sol1.py" [label="{sol1.py|+ total\l\l|+ combinations(n, r)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_36 {
    label="problem_36";
    "sol1.py" [label="{sol1.py|\l|+ is_palindrome(n)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_15 {
    label="problem_15";
    "sol1.py" [label="{sol1.py|\l|+ lattice_paths(n)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_05 {
    label="problem_05";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ gcd(x, y)\l+ lcm(x, y)\l+ main()\l}"];
}

subgraph cluster_problem_40 {
    label="problem_40";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_17 {
    label="problem_17";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_01 {
    label="problem_01";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"sol5.py" [label="{sol5.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol3.py" [label="{sol3.py|\l|+ main()\l}"];
"sol2.py" [label="{sol2.py|\l|+ main()\l}"];
"sol4.py" [label="{sol4.py|\l|+ mulitples(limit)\l}"];
}

subgraph cluster_problem_10 {
    label="problem_10";
    "sol1.py" [label="{sol1.py|\l|+ is_prime(n)\l+ sum_of_primes(n)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ primeCheck(number)\l+ prime_generator()\l+ main()\l}"];
}

subgraph cluster_problem_28 {
    label="problem_28";
    "sol1.py" [label="{sol1.py|\l|+ diagonal_sum(n)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_problem_04 {
    label="problem_04";
    "sol1.py" [label="{sol1.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"sol2.py" [label="{sol2.py|\l|+ main()\l}"];
}

subgraph cluster_problem_29 {
    label="problem_29";
    "solution.py" [label="{solution.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_strings {
    label="strings";
    "knuth_morris_pratt.py" [label="{knuth_morris_pratt.py|\l|+ kmp(pattern, text)\l+ get_failure_array(pattern)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"manacher.py" [label="{manacher.py|\l|+ palindromic_length(center, diff, string)\l+ palindromic_string(input_string)\l}"];
"min_cost_string_conversion.py" [label="{min_cost_string_conversion.py|\l|+ compute_transform_tables(X, Y, cC, cR, cD, cI)\l+ assemble_transformation(ops, i, j)\l+ replace(sequence, string)\l+ main()\l}"];
"levenshtein_distance.py" [label="{levenshtein_distance.py|\l|+ levenshtein_distance(first_word, second_word)\l}"];
"rabin_karp.py" [label="{rabin_karp.py|\l|+ rabin_karp(pattern, text)\l}"];
}

subgraph cluster_simple_client {
    label="simple_client";
    "server.py" [label="{server.py|\l|+ main()\l}"];
"client.py" [label="{client.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_maths {
    label="maths";
    "segmented_sieve.py" [label="{segmented_sieve.py|\l|+ sieve(n)\l+ main()\l}"];
"FindMin.py" [label="{FindMin.py|\l|+ findMin(x)\l+ main()\l}"];
"absMax.py" [label="{absMax.py|\l|+ absMax(x)\l+ main()\l}"];
"modular_exponential.py" [label="{modular_exponential.py|\l|+ modularExponential(base, power, mod)\l+ main()\l}"];
"find_hcf.py" [label="{find_hcf.py|\l|+ find_hcf(num_1, num_2)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"newton_raphson.py" [label="{newton_raphson.py|\l|+ calc_derivative(f, a, h)\l+ newton_raphson(f, x0, maxiter, step, maxerror, logsteps)\l}"];
"FindMax.py" [label="{FindMax.py|\l|+ find_max(nums)\l+ main()\l}"];
"abs.py" [label="{abs.py|\l|+ absVal(num)\l+ main()\l}"];
"trapezoidal_rule.py" [label="{trapezoidal_rule.py|\l|+ method_1(boundary, steps)\l+ makePoints(a, b, h)\l+ f(x)\l+ main()\l}"];
"simpson_rule.py" [label="{simpson_rule.py|\l|+ method_2(boundary, steps)\l+ makePoints(a, b, h)\l+ f(x)\l+ main()\l}"];
"find_lcm.py" [label="{find_lcm.py|\l|+ find_lcm(num_1, num_2)\l+ main()\l}"];
"fibonacci_sequence_recursion.py" [label="{fibonacci_sequence_recursion.py|\l|+ recur_fibo(n)\l+ isPositiveInteger(limit)\l+ main()\l}"];
"greater_common_divisor.py" [label="{greater_common_divisor.py|\l|+ gcd(a, b)\l+ main()\l}"];
"PrimeCheck.py" [label="{PrimeCheck.py|\l|+ primeCheck(number)\l+ main()\l}"];
"absMin.py" [label="{absMin.py|\l|+ absMin(x)\l+ main()\l}"];
"sieve_of_eratosthenes.py" [label="{sieve_of_eratosthenes.py|\l|+ sieve(n)\l+ main()\l}"];
"basic_maths.py" [label="{basic_maths.py|\l|+ primeFactors(n)\l+ numberOfDivisors(n)\l+ sumOfDivisors(n)\l+ eulerPhi(n)\l+ main()\l}"];
"three_n_plus_one.py" [label="{three_n_plus_one.py|\l|+ n31(a)\l+ main()\l}"];
"average.py" [label="{average.py|\l|+ average(nums)\l+ main()\l}"];
}

subgraph cluster_tests {
    label="tests";
    subgraph cluster_searches {
    label="searches";
    "test_linear_search.py" [label="{test_linear_search.py|\l|+ sorted_list()\l+ search_items()\l+ expected_returns()\l+ test_linear_search(sorted_list, search_items, expected_returns)\l+ test_linear_search_returns_none_if_target_not_in_list(sorted_list)\l}"];
"test_sentinel_linear_search.py" [label="{test_sentinel_linear_search.py|\l|+ sorted_list()\l+ search_items()\l+ expected_returns()\l+ test_linear_search(sorted_list, search_items, expected_returns)\l+ test_linear_search_returns_none_if_target_not_in_list(sorted_list)\l}"];
"test_tabu_search.py" [label="{test_tabu_search.py|+ TEST_FILE\l+ NEIGHBOURS_DICT\l+ FIRST_SOLUTION\l+ DISTANCE\l+ NEIGHBOURHOOD_OF_SOLUTIONS\l\l|}"];
"test_jump_search.py" [label="{test_jump_search.py|\l|+ test_jump_search_finds_target_in_sorted_list(capsys)\l}"];
"test_interpolation_search.py" [label="{test_interpolation_search.py|\l|+ test_assert_sorted_on_sorted_list()\l+ test_assert_sorted_raises_on_unsorted_list()\l}"];
"test_binary_search.py" [label="{test_binary_search.py|\l|+ sorted_list()\l+ search_items()\l+ expected_returns()\l+ test_binary_search_finds_target(sorted_list, search_items, expected_returns)\l+ test_binary_search_returns_none_if_target_not_in_list(sorted_list)\l+ test_binary_search_std_lib(sorted_list, search_items, expected_returns)\l+ test_binary_search_std_lib_returns_none_if_target_not_in_list(sorted_list)\l+ test_binary_search_by_recursion(sorted_list, search_items, expected_returns)\l+ test_binary_search_by_recursion_returns_none_if_target_not_in_list(sorted_list)\l+ test_binary_search_returns_none_if_target_not_in_list(sorted_list)\l+ test_assert_sorted_on_sorted_list(sorted_list)\l+ test_assert_sorted_raises_on_unsorted_list()\l}"];
}

subgraph cluster_strings {
    label="strings";
    "test_min_cost_string_conversion.py" [label="{test_min_cost_string_conversion.py|\l|+ test_min_cost_for_replacing_python_with_algorithms()\l}"];
"test_levenshtein_distance.py" [label="{test_levenshtein_distance.py|\l|+ test_levenshtein_distance_between_test_and_data()\l+ test_levenshtein_distance_between_sample_and_set()\l}"];
"test_knuth_morris_pratt.py" [label="{test_knuth_morris_pratt.py|\l|+ test_knuth_morris_pratt_find_pattern_in_text1_and_text2()\l+ test_knuth_morris_pratt_find_pattern_in_text_1()\l+ test_knuth_morris_pratt_find_pattern_in_text_2()\l+ test_knuth_morris_pratt_find_pattern_in_text_3()\l+ test_knuth_morris_pratt_get_failure_array()\l}"];
"test_rabin_karp.py" [label="{test_rabin_karp.py|\l|+ test_rabin_karp_find_pattern_in_text1_and_text2()\l+ test_rabin_karp_find_pattern_in_text_1()\l+ test_rabin_karp_find_pattern_in_text_2()\l+ test_rabin_karp_find_pattern_in_text_3()\l}"];
"test_manacher.py" [label="{test_manacher.py|\l|+ test_manacher_find_palindromic_string()\l+ test_manacher_return_output_from_center()\l}"];
}

subgraph cluster_maths {
    label="maths";
    "test_sieve_of_eratosthenes.py" [label="{test_sieve_of_eratosthenes.py|\l|+ test_sieve()\l}"];
"test_FindMax.py" [label="{test_FindMax.py|\l|+ test_findMax()\l}"];
"test_absMax.py" [label="{test_absMax.py|\l|+ test_absMax()\l}"];
"test_simpson_rule.py" [label="{test_simpson_rule.py|\l|+ test_simpson_rule()\l}"];
"test_modular_exponential.py" [label="{test_modular_exponential.py|\l|+ test_modularExponential()\l}"];
"test_trapezoidal_rule.py" [label="{test_trapezoidal_rule.py|\l|+ test_trapezoidal_rule()\l}"];
"test_basic_maths.py" [label="{test_basic_maths.py|\l|+ test_basic_maths(functioncall, expected)\l}"];
"test_average.py" [label="{test_average.py|\l|+ test_average()\l}"];
"test_PrimeCheck.py" [label="{test_PrimeCheck.py|\l|+ test_primeCheck(arg, expected)\l}"];
"test_segmented_sieve.py" [label="{test_segmented_sieve.py|\l|+ test_sieve()\l}"];
"test_find_lcm.py" [label="{test_find_lcm.py|\l|+ test_find_lcm()\l}"];
"test_fibonacci_sequence_recursion.py" [label="{test_fibonacci_sequence_recursion.py|\l|+ test_less_than_one()\l+ test_recur_fibo()\l}"];
"test_abs.py" [label="{test_abs.py|\l|+ test_absVal()\l}"];
"test_findMin.py" [label="{test_findMin.py|\l|+ test_findMin()\l}"];
"test_three_n_plus_one.py" [label="{test_three_n_plus_one.py|\l|+ test_n31_with_43()\l+ test_n31_last_element()\l}"];
"test_newton_raphson.py" [label="{test_newton_raphson.py|\l|+ test_newton_raphson_positive()\l+ test_newton_raphson_negative()\l}"];
"test_greater_common_divisor.py" [label="{test_greater_common_divisor.py|\l|+ test_gcd()\l}"];
"test_find_hcf.py" [label="{test_find_hcf.py|\l|+ test_find_hcf()\l}"];
"test_absMin.py" [label="{test_absMin.py|\l|+ test_absMin()\l}"];
}

subgraph cluster_hashes {
    label="hashes";
    "test_sha1.py" [label="{test_sha1.py|\l|}"];
"test_md5.py" [label="{test_md5.py|\l|+ test_hash_empty_string()\l+ test_hash_quick_brown_fox()\l}"];
}

subgraph cluster_test_dynamic_programming {
    label="test_dynamic_programming";
    "test_dynamic_programming_floyd_warshall.py" [label="{test_dynamic_programming_floyd_warshall.py|\l|+ graph()\l+ test_floyd_warshall(graph)\l}"];
}

subgraph cluster_networking_flow {
    label="networking_flow";
    "test_ford_fulkerson.py" [label="{test_ford_fulkerson.py|\l|+ args()\l+ test_ford_fulkerson(args)\l}"];
"test_minimum_cut.py" [label="{test_minimum_cut.py|\l|+ args()\l+ test_minimum_cut(args)\l}"];
}

subgraph cluster_arithmetic_analysis {
    label="arithmetic_analysis";
    "conftest.py" [label="{conftest.py|\l|+ epsilon()\l}"];
"test_lu_decomposition.py" [label="{test_lu_decomposition.py|\l|+ decomposition_matrix()\l+ lower_triangular_matrix()\l+ upper_triangular_matrix()\l+ test_decomposition(decomposition_matrix, lower_triangular_matrix, upper_triangular_matrix)\l}"];
"test_newton_method.py" [label="{test_newton_method.py|\l|+ test_newton_method(epsilon)\l}"];
"test_bisection.py" [label="{test_bisection.py|\l|+ test_bisection(epsilon)\l}"];
"test_intersection.py" [label="{test_intersection.py|\l|+ test_intersection(epsilon)\l}"];
"test_newton_raphson_method.py" [label="{test_newton_raphson_method.py|\l|+ test_trigonometric_function()\l+ test_polynomial_root()\l+ test_square_root_five()\l+ test_exponential_root()\l}"];
}

subgraph cluster_dynamic_programming {
    label="dynamic_programming";
    "test_longest_common_subsequence.py" [label="{test_longest_common_subsequence.py|\l|+ expected()\l+ test_longest_common_subsequence(expected)\l}"];
"test_knapsack.py" [label="{test_knapsack.py|\l|+ params()\l+ test_knapsack(params)\l}"];
"test_fibonacci.py" [label="{test_fibonacci.py|\l|+ test_fibonacci()\l}"];
"test_FractionalKnapsack.py" [label="{test_FractionalKnapsack.py|\l|+ test_FractionalKnapsack()\l}"];
"test_rod_cutting.py" [label="{test_rod_cutting.py|\l|+ test_rod_cutting()\l}"];
"test_fastfibonacci.py" [label="{test_fastfibonacci.py|\l|+ test_fastfibonacci()\l+ test_fastfibonacci_raises()\l}"];
"test_matrix_chain_order.py" [label="{test_matrix_chain_order.py|\l|+ expected()\l+ test_matrix_chain_order(expected)\l}"];
"test_longest_sub_array.py" [label="{test_longest_sub_array.py|\l|+ test_longest_sub_array()\l}"];
"test_edit_distance.py" [label="{test_edit_distance.py|\l|+ test_edit_distance()\l}"];
"test_minimum_partition.py" [label="{test_minimum_partition.py|\l|+ test_minimum_partition()\l}"];
"test_longest_increasing_subsequence_nlogn.py" [label="{test_longest_increasing_subsequence_nlogn.py|\l|+ test_longest_increasing_subsequence_nlogn()\l}"];
"test_abbreviation.py" [label="{test_abbreviation.py|\l|+ test_abbreviation()\l}"];
"test_coin_change.py" [label="{test_coin_change.py|\l|+ test_coin_change()\l}"];
"test_floyd_warshall.py" [label="{test_floyd_warshall.py|\l|+ graph()\l+ test_floyd_warshall(graph)\l}"];
"test_longest_increasing_subsequence.py" [label="{test_longest_increasing_subsequence.py|\l|+ test_longest_increasing_subsequence(arg, expected)\l}"];
"test_integer_partition.py" [label="{test_integer_partition.py|\l|+ test_integer_partition()\l}"];
}

subgraph cluster_binary_tree {
    label="binary_tree";
    "test_basic_binary_tree.py" [label="{test_basic_binary_tree.py|\l|+ binary_tree()\l+ test_is_not_full_binary_tree(binary_tree)\l+ test_depth_of_binary_tree(binary_tree)\l}"];
}

subgraph cluster_sorts {
    label="sorts";
    "conftest.py" [label="{conftest.py|\l|+ randlist()\l}"];
"test_bogosort.py" [label="{test_bogosort.py|\l|}"];
"test_out_of_place_sorts.py" [label="{test_out_of_place_sorts.py|+ SORTS\l+ NUM_ELEMENTS\l+ MIN\l+ MAX\l\l|}"];
"test_in_place_sorts.py" [label="{test_in_place_sorts.py|+ SORTS\l+ NUM_ELEMENTS\l+ MIN\l+ MAX\l\l|}"];
}

subgraph cluster_other {
    label="other";
    "test_fischer_yates_shuffle.py" [label="{test_fischer_yates_shuffle.py|\l|+ test_shuffle_integers()\l+ test_shuffle_strings()\l}"];
"test_frequency_finder.py" [label="{test_frequency_finder.py|\l|+ test_frequency_match_score()\l}"];
"test_tower_of_hanoi.py" [label="{test_tower_of_hanoi.py|\l|+ expected_output_lines()\l+ test_move_tower(capsys, expected_output_lines)\l}"];
"test_linear_congruential_generator.py" [label="{test_linear_congruential_generator.py|\l|+ generator()\l+ test_generate_numbers(generator)\l}"];
"test_euclidean_gcd.py" [label="{test_euclidean_gcd.py|\l|+ test_relatively_prime()\l+ test_is_symmetric()\l+ test_not_relatively_prime()\l}"];
"test_palindrome.py" [label="{test_palindrome.py|\l|+ palindrome()\l+ test_recursive_is_palindrome(palindrome)\l+ test_regular_is_palindrome(palindrome)\l}"];
"test_detecting_english_programmatically.py" [label="{test_detecting_english_programmatically.py|\l|+ test_is_english()\l+ test_is_not_english()\l}"];
}

subgraph cluster_analysis {
    label="analysis";
    "test_psnr.py" [label="{test_psnr.py|\l|+ test_psnr_on_known_images()\l}"];
}

subgraph cluster_ciphers {
    label="ciphers";
    "test_affine_cipher.py" [label="{test_affine_cipher.py|\l|+ plaintext()\l+ encrypted()\l+ key()\l+ test_encrypt_message(plaintext, encrypted, key)\l}"];
"test_transposition_cipher.py" [label="{test_transposition_cipher.py|\l|+ plaintext()\l+ ciphertext()\l+ key()\l+ test_encrypt_message(plaintext, ciphertext, key)\l+ test_decrypt_message(plaintext, ciphertext, key)\l}"];
"test_simple_substitution_cipher.py" [label="{test_simple_substitution_cipher.py|\l|+ plaintext()\l+ ciphertext()\l+ key()\l+ test_encrypt_message(plaintext, ciphertext, key)\l+ test_decrypt_message(plaintext, ciphertext, key)\l}"];
"test_onepad_cipher.py" [label="{test_onepad_cipher.py|\l|+ test_encrypt_decrypt_is_a_no_op()\l}"];
"test_brute_force_caesar_cipher.py" [label="{test_brute_force_caesar_cipher.py|\l|+ message()\l+ expected_output()\l+ test_decryption_print(capsys, message, expected_output)\l}"];
"test_rabin_miller.py" [label="{test_rabin_miller.py|\l|+ test_generate_prime_agrees_with_prime_checker()\l}"];
"test_vigenere_cipher.py" [label="{test_vigenere_cipher.py|\l|+ plaintext()\l+ ciphertext()\l+ key()\l+ test_encrypt_message(plaintext, ciphertext, key)\l+ test_decrypt_message(plaintext, ciphertext, key)\l}"];
"test_xor_cipher.py" [label="{test_xor_cipher.py|\l|+ _cd(newdir)\l+ key()\l+ plaintext()\l+ textfile(tmpdir)\l+ test_encrypt_decrypt_returns_a_char_list_of_the_plaintext(key, plaintext)\l+ test_encrypt_decrypt_string_is_a_no_op(key, plaintext)\l+ test_encrypt_file_doesnt_crash(key, textfile, tmpdir)\l+ test_decrypt_file_doesnt_crash(key, textfile, tmpdir)\l}"];
"test_base64_cipher.py" [label="{test_base64_cipher.py|\l|+ test_encrypt_decrypt_is_a_no_op()\l}"];
"test_rot13.py" [label="{test_rot13.py|\l|+ test_dencrypt()\l}"];
}

subgraph cluster_matrix {
    label="matrix";
    "test_matrix_multiplication_addition.py" [label="{test_matrix_multiplication_addition.py|\l|+ matrices()\l+ expected_add()\l+ expected_multiply()\l+ test_add(matrices, expected_add)\l+ test_multiply(matrices, expected_multiply)\l}"];
}

subgraph cluster_graphs {
    label="graphs";
    "conftest.py" [label="{conftest.py|\l|+ sample_graph()\l}"];
"test_dfs.py" [label="{test_dfs.py|\l|+ test_dfs(sample_graph)\l}"];
"test_articulation_points.py" [label="{test_articulation_points.py|\l|+ adjacency_list_graph()\l+ test_articulation_points(adjacency_list_graph)\l}"];
"test_finding_bridges.py" [label="{test_finding_bridges.py|\l|+ adjacency_list_graph()\l+ test_finding_bridges(adjacency_list_graph)\l}"];
"test_kahns_algorithm_long.py" [label="{test_kahns_algorithm_long.py|\l|+ adjacency_list_graph()\l+ test_kahns_algorithm_long(adjacency_list_graph)\l}"];
"test_bfs.py" [label="{test_bfs.py|\l|+ test_bfs(sample_graph)\l}"];
"test_kahns_algorithm_topo.py" [label="{test_kahns_algorithm_topo.py|\l|+ adjacency_list_graph()\l+ test_kahns_algorithm_topo(adjacency_list_graph)\l}"];
"test_graphs_dijkstra.py" [label="{test_graphs_dijkstra.py|\l|+ dijkstra_graph()\l+ test_dijkstra(dijkstra_graph)\l}"];
"test_tarjans_scc.py" [label="{test_tarjans_scc.py|\l|+ tarjan_graph()\l+ test_tarjan(tarjan_graph)\l}"];
"test_check_bipartite_graph_bfs.py" [label="{test_check_bipartite_graph_bfs.py|\l|+ bipartite_adjacency_list_graph()\l+ test_is_bipartite(bipartite_adjacency_list_graph)\l}"];
}

"test_imports.py" [label="{test_imports.py|\l|+ _split_path_rec(path)\l+ _gather_modules()\l+ test_import_module(module)\l}"];
}

subgraph cluster_hashes {
    label="hashes";
    "__init__.py" [label="{__init__.py|\l|}"];
"sha1.py" [label="{sha1.py|\l|+ main()\l}"];
"chaos_machine.py" [label="{chaos_machine.py|+ K\l+ t\l+ m\l+ machine_time\l\l|+ push(seed)\l+ pull()\l+ reset()\l+ main()\l}"];
"md5.py" [label="{md5.py|\l|+ rearrange(bitString32)\l+ reformatHex(i)\l+ pad(bitString)\l+ getBlock(bitString)\l+ not32(i)\l+ sum32(a, b)\l+ leftrot32(i, s)\l+ md5me(testString)\l+ test()\l}"];
}

subgraph cluster_networking_flow {
    label="networking_flow";
    "__init__.py" [label="{__init__.py|\l|}"];
"minimum_cut.py" [label="{minimum_cut.py|+ graph\l\l|+ BFS(graph, s, t, parent)\l+ mincut(graph, source, sink)\l}"];
"ford_fulkerson.py" [label="{ford_fulkerson.py|+ graph\l\l|+ BFS(graph, s, t, parent)\l+ FordFulkerson(graph, source, sink)\l}"];
}

subgraph cluster_neural_network {
    label="neural_network";
    "convolution_neural_network.py" [label="{convolution_neural_network.py|\l|}"];
"__init__.py" [label="{__init__.py|\l|}"];
"bpnn.py" [label="{bpnn.py|\l|+ sigmoid(x)\l+ example()\l}"];
"perceptron.py" [label="{perceptron.py|\l|+ main()\l}"];
}

subgraph cluster_boolean_algebra {
    label="boolean_algebra";
    "__init__.py" [label="{__init__.py|\l|}"];
"quine_mc_cluskey.py" [label="{quine_mc_cluskey.py|\l|+ compare_string(string1, string2)\l+ check(binary)\l+ decimal_to_binary(no_of_variable, minterms)\l+ is_for_table(string1, string2, count)\l+ selection(chart, prime_implicants)\l+ prime_implicant_chart(prime_implicants, binary)\l+ main()\l}"];
}

subgraph cluster_traversals {
    label="traversals";
    "binary_tree_traversals.py" [label="{binary_tree_traversals.py|\l|+ build_tree()\l+ pre_order(node)\l+ in_order(node)\l+ post_order(node)\l+ level_order(node)\l+ level_order_actual(node)\l+ pre_order_iter(node)\l+ in_order_iter(node)\l+ post_order_iter(node)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_arithmetic_analysis {
    label="arithmetic_analysis";
    "bisection.py" [label="{bisection.py|\l|+ bisection(function, a, b)\l+ f(x)\l+ main()\l}"];
"newton_method.py" [label="{newton_method.py|\l|+ newton(function, function1, startingInt)\l+ f(x)\l+ f1(x)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"lu_decomposition.py" [label="{lu_decomposition.py|\l|+ LUDecompose(table)\l+ main()\l}"];
"intersection.py" [label="{intersection.py|\l|+ intersection(function, x0, x1)\l+ f(x)\l+ main()\l}"];
"newton_raphson_method.py" [label="{newton_raphson_method.py|\l|+ NewtonRaphson(func, a)\l+ main()\l}"];
}

subgraph cluster_dynamic_programming {
    label="dynamic_programming";
    "integer_partition.py" [label="{integer_partition.py|\l|+ partition(m)\l}"];
"matrix_chain_order.py" [label="{matrix_chain_order.py|\l|+ MatrixChainOrder(array)\l+ PrintOptimalSolution(OptimalSolution, i, j)\l+ main()\l}"];
"longest_increasing_subsequence_nlogn.py" [label="{longest_increasing_subsequence_nlogn.py|+ v\l\l|+ CeilIndex(v, l, r, key)\l+ LongestIncreasingSubsequenceLength(v)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"edit_distance.py" [label="{edit_distance.py|\l|}"];
"fastfibonacci.py" [label="{fastfibonacci.py|\l|+ fibonacci(n)\l+ _fib(n)\l}"];
"floyd_warshall.py" [label="{floyd_warshall.py|\l|}"];
"fibonacci.py" [label="{fibonacci.py|\l|}"];
"FractionalKnapsack.py" [label="{FractionalKnapsack.py|\l|+ fracKnapsack(vl, wt, W, n)\l}"];
"minimum_partition.py" [label="{minimum_partition.py|\l|+ findMin(arr)\l}"];
"abbreviation.py" [label="{abbreviation.py|\l|+ abbr(a, b)\l}"];
"longest_sub_array.py" [label="{longest_sub_array.py|\l|}"];
"longest_common_subsequence.py" [label="{longest_common_subsequence.py|\l|+ lcs_dp(x, y)\l}"];
"rod_cutting.py" [label="{rod_cutting.py|+ length\l+ prices\l+ solutions\l\l|+ CutRod(n)\l}"];
"longest_increasing_subsequence.py" [label="{longest_increasing_subsequence.py|\l|+ longestSub(ARRAY)\l+ main()\l}"];
"k_means_clustering_tensorflow.py" [label="{k_means_clustering_tensorflow.py|\l|+ TFKMeansCluster(vectors, noofclusters)\l}"];
"knapsack.py" [label="{knapsack.py|\l|+ MF_knapsack(i, wt, val, j)\l+ knapsack(W, wt, val, n)\l}"];
"coin_change.py" [label="{coin_change.py|\l|+ dp_count(S, m, n)\l}"];
"max_sub_array.py" [label="{max_sub_array.py|\l|+ find_max_sub_array(A, low, high)\l+ find_max_cross_sum(A, low, mid, high)\l}"];
}

subgraph cluster_binary_tree {
    label="binary_tree";
    "__init__.py" [label="{__init__.py|\l|}"];
"basic_binary_tree.py" [label="{basic_binary_tree.py|\l|+ depth_of_tree(tree)\l+ is_full_binary_tree(tree)\l+ main()\l}"];
}

subgraph cluster_sorts {
    label="sorts";
    "heap_sort.py" [label="{heap_sort.py|\l|+ heapify(unsorted, index, heap_size)\l+ heap_sort(unsorted)\l}"];
"pancake_sort.py" [label="{pancake_sort.py|\l|+ pancakesort(arr)\l}"];
"insertion_sort.py" [label="{insertion_sort.py|\l|+ insertion_sort(collection)\l}"];
"bucket_sort.py" [label="{bucket_sort.py|+ DEFAULT_BUCKET_SIZE\l\l|+ bucketSort(myList, bucketSize)\l}"];
"comb_sort.py" [label="{comb_sort.py|\l|+ comb_sort(data)\l}"];
"random_normal_distribution_quicksort.py" [label="{random_normal_distribution_quicksort.py|+ outfile\l+ p\l+ X\l+ M\l+ r\l+ z\l\l|+ _inPlaceQuickSort(A, start, end)\l+ _inPlacePartition(A, start, end)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"quick_sort_3_partition.py" [label="{quick_sort_3_partition.py|\l|+ quick_sort(sorting)\l+ quick_sort_3partition(sorting, left, right)\l}"];
"topological_sort.py" [label="{topological_sort.py|+ edges\l+ vertices\l+ sort\l\l|+ topological_sort(start, visited, sort)\l}"];
"counting_sort.py" [label="{counting_sort.py|\l|+ counting_sort(collection)\l+ counting_sort_string(string)\l}"];
"merge_sort_fastest.py" [label="{merge_sort_fastest.py|\l|+ merge_sort(lst)\l}"];
"cyclesort.py" [label="{cyclesort.py|\l|+ cycle_sort(array)\l}"];
"shell_sort.py" [label="{shell_sort.py|\l|+ shell_sort(collection)\l}"];
"merge_sort.py" [label="{merge_sort.py|\l|+ merge_sort(collection)\l}"];
"gnome_sort.py" [label="{gnome_sort.py|\l|+ gnome_sort(unsorted)\l}"];
"cocktail_shaker_sort.py" [label="{cocktail_shaker_sort.py|\l|+ cocktail_shaker_sort(unsorted)\l}"];
"selection_sort.py" [label="{selection_sort.py|\l|+ selection_sort(collection)\l}"];
"bubble_sort.py" [label="{bubble_sort.py|\l|+ bubble_sort(collection)\l}"];
"radix_sort.py" [label="{radix_sort.py|\l|+ radixsort(lst)\l}"];
"bogosort.py" [label="{bogosort.py|\l|+ bogosort(collection)\l}"];
"external-sort.py" [label="{external-sort.py|\l|+ parse_memory(string)\l+ main()\l}"];
"quick_sort.py" [label="{quick_sort.py|\l|+ quick_sort(ARRAY)\l}"];
"BitonicSort.py" [label="{BitonicSort.py|\l|+ compAndSwap(a, i, j, dire)\l+ bitonicMerge(a, low, cnt, dire)\l+ bitonicSort(a, low, cnt, dire)\l+ sort(a, N, up)\l+ main()\l}"];
"timsort.py" [label="{timsort.py|\l|+ binary_search(lst, item, start, end)\l+ insertion_sort(lst)\l+ merge(left, right)\l+ timsort(lst)\l+ main()\l}"];
"tree_sort.py" [label="{tree_sort.py|\l|+ inorder(root, res)\l+ treesort(arr)\l}"];
}

subgraph cluster_other {
    label="other";
    subgraph cluster_game_of_life {
    label="game_of_life";
    "__init__.py" [label="{__init__.py|\l|}"];
"game_o_life.py" [label="{game_o_life.py|+ usage_doc\l+ choice\l\l|+ create_canvas(size)\l+ seed(canvas)\l+ run(canvas)\l+ __judge_point(pt, neighbours)\l}"];
}

"findingPrimes.py" [label="{findingPrimes.py|\l|+ SOE(n)\l}"];
"fischer_yates_shuffle.py" [label="{fischer_yates_shuffle.py|\l|+ FYshuffle(LIST)\l+ main()\l}"];
"frequency_finder.py" [label="{frequency_finder.py|+ englishLetterFreq\l+ ETAOIN\l+ LETTERS\l\l|+ getLetterCount(message)\l+ getItemAtIndexZero(x)\l+ getFrequencyOrder(message)\l+ englishFreqMatchScore(message)\l+ main()\l}"];
"anagrams.py" [label="{anagrams.py|\l|+ signature(word)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"password_generator.py" [label="{password_generator.py|\l|+ password_generator(ctbi, i)\l+ random_number(ctbi, i)\l+ random_letters(ctbi, i)\l+ random_characters(ctbi, i)\l+ main()\l}"];
"nested_brackets.py" [label="{nested_brackets.py|\l|+ is_balanced(S)\l+ main()\l}"];
"word_patterns.py" [label="{word_patterns.py|\l|+ getWordPattern(word)\l+ main()\l}"];
"two_sum.py" [label="{two_sum.py|\l|+ twoSum(nums, target)\l}"];
"palindrome.py" [label="{palindrome.py|\l|+ is_palindrome(str)\l+ recursive_palindrome(str)\l+ main()\l}"];
"tower_of_hanoi.py" [label="{tower_of_hanoi.py|\l|+ moveTower(height, fromPole, toPole, withPole)\l+ moveDisk(fp, tp)\l+ main()\l}"];
"detecting_english_programmatically.py" [label="{detecting_english_programmatically.py|+ UPPERLETTERS\l+ LETTERS_AND_SPACE\l+ ENGLISH_WORDS\l\l|+ loadDictionary()\l+ getEnglishCount(message)\l+ removeNonLetters(message)\l+ isEnglish(message, wordPercentage, letterPercentage)\l+ main()\l}"];
"binary_exponentiation.py" [label="{binary_exponentiation.py|\l|+ b_expo(a, b)\l+ b_expo_mod(a, b, c)\l}"];
"primelib.py" [label="{primelib.py|\l|+ isPrime(number)\l+ sieveEr(N)\l+ getPrimeNumbers(N)\l+ primeFactorization(number)\l+ greatestPrimeFactor(number)\l+ smallestPrimeFactor(number)\l+ isEven(number)\l+ isOdd(number)\l+ goldbach(number)\l+ gcd(number1, number2)\l+ kgV(number1, number2)\l+ getPrime(n)\l+ getPrimesBetween(pNumber1, pNumber2)\l+ getDivisors(n)\l+ isPerfectNumber(number)\l+ simplifyFraction(numerator, denominator)\l+ factorial(n)\l+ fib(n)\l}"];
"binary_exponentiation_2.py" [label="{binary_exponentiation_2.py|\l|+ b_expo(a, b)\l+ b_expo_mod(a, b, c)\l}"];
"linear_congruential_generator.py" [label="{linear_congruential_generator.py|+ __author__\l\l|+ main()\l}"];
"sierpinski_triangle.py" [label="{sierpinski_triangle.py|\l|+ getMid(p1, p2)\l+ triangle(myPen, points, depth)\l+ main()\l}"];
"euclidean_gcd.py" [label="{euclidean_gcd.py|\l|+ euclidean_gcd(a, b)\l+ main()\l}"];
}

subgraph cluster_ciphers {
    label="ciphers";
    "affine_cipher.py" [label="{affine_cipher.py|+ SYMBOLS\l\l|+ main()\l+ getKeyParts(key)\l+ checkKeys(keyA, keyB, mode)\l+ encryptMessage(key, message)\l+ decryptMessage(key, message)\l+ getRandomKey()\l}"];
"xor_cipher.py" [label="{xor_cipher.py|\l|}"];
"rabin_miller.py" [label="{rabin_miller.py|\l|+ rabinMiller(num)\l+ isPrime(num)\l+ generateLargePrime(keysize)\l}"];
"hill_cipher.py" [label="{hill_cipher.py|\l|+ gcd(a, b)\l+ main()\l}"];
"transposition_cipher_encrypt_decrypt_file.py" [label="{transposition_cipher_encrypt_decrypt_file.py|\l|+ main()\l}"];
"cryptomath_module.py" [label="{cryptomath_module.py|\l|+ gcd(a, b)\l+ findModInverse(a, m)\l}"];
"rsa_cipher.py" [label="{rsa_cipher.py|+ DEFAULT_BLOCK_SIZE\l+ BYTE_SIZE\l\l|+ main()\l+ getBlocksFromText(message, blockSize)\l+ getTextFromBlocks(blockInts, messageLength, blockSize)\l+ encryptMessage(message, key, blockSize)\l+ decryptMessage(encryptedBlocks, messageLength, key, blockSize)\l+ readKeyFile(keyFilename)\l+ encryptAndWriteToFile(messageFilename, keyFilename, message, blockSize)\l+ readFromFileAndDecrypt(messageFilename, keyFilename)\l}"];
"playfair_cipher.py" [label="{playfair_cipher.py|\l|+ chunker(seq, size)\l+ prepare_input(dirty)\l+ generate_table(key)\l+ encode(plaintext, key)\l+ decode(ciphertext, key)\l}"];
"base16.py" [label="{base16.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"vigenere_cipher.py" [label="{vigenere_cipher.py|+ LETTERS\l\l|+ main()\l+ encryptMessage(key, message)\l+ decryptMessage(key, message)\l+ translateMessage(key, message, mode)\l}"];
"base64_cipher.py" [label="{base64_cipher.py|\l|+ encodeBase64(text)\l+ decodeBase64(text)\l+ main()\l}"];
"elgamal_key_generator.py" [label="{elgamal_key_generator.py|+ min_primitive_root\l\l|+ main()\l+ primitiveRoot(p_val)\l+ generateKey(keySize)\l+ makeKeyFiles(name, keySize)\l}"];
"simple_substitution_cipher.py" [label="{simple_substitution_cipher.py|+ LETTERS\l\l|+ main()\l+ checkValidKey(key)\l+ encryptMessage(key, message)\l+ decryptMessage(key, message)\l+ translateMessage(key, message, mode)\l+ getRandomKey()\l}"];
"transposition_cipher.py" [label="{transposition_cipher.py|\l|+ main()\l+ encryptMessage(key, message)\l+ decryptMessage(key, message)\l}"];
"caesar_cipher.py" [label="{caesar_cipher.py|\l|+ encrypt(strng, key)\l+ decrypt(strng, key)\l+ brute_force(strng)\l+ main()\l}"];
"base85.py" [label="{base85.py|\l|+ main()\l}"];
"rsa_key_generator.py" [label="{rsa_key_generator.py|\l|+ main()\l+ generateKey(keySize)\l+ makeKeyFiles(name, keySize)\l}"];
"base32.py" [label="{base32.py|\l|+ main()\l}"];
"rot13.py" [label="{rot13.py|\l|+ dencrypt(s, n)\l+ main()\l}"];
"brute_force_caesar_cipher.py" [label="{brute_force_caesar_cipher.py|\l|+ decrypt(message)\l+ main()\l}"];
"onepad_cipher.py" [label="{onepad_cipher.py|\l|}"];
}

subgraph cluster_matrix {
    label="matrix";
    "matrix_multiplication_addition.py" [label="{matrix_multiplication_addition.py|\l|+ add(matrix_a, matrix_b)\l+ multiply(matrix_a, matrix_b)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

subgraph cluster_data_structures {
    label="data_structures";
    subgraph cluster_graph {
    label="graph";
    "dijkstra.py" [label="{dijkstra.py|\l|+ printDist(dist, V)\l+ minDist(mdist, vset, V)\l+ Dijkstra(graph, V, src)\l}"];
"breadth_first_search.py" [label="{breadth_first_search.py|\l|}"];
"even_tree.py" [label="{even_tree.py|\l|+ dfs(start)\l+ even_tree()\l}"];
"graph.py" [label="{graph.py|\l|}"];
"__init__.py" [label="{__init__.py|\l|}"];
"graph_list.py" [label="{graph_list.py|\l|}"];
"bellman_ford.py" [label="{bellman_ford.py|\l|+ printDist(dist, V)\l+ BellmanFord(graph, V, E, src)\l}"];
"graph_matrix.py" [label="{graph_matrix.py|\l|}"];
"floyd_warshall.py" [label="{floyd_warshall.py|\l|+ printDist(dist, V)\l+ FloydWarshall(graph, V)\l}"];
"depth_first_search.py" [label="{depth_first_search.py|\l|}"];
"dijkstra_algorithm.py" [label="{dijkstra_algorithm.py|\l|}"];
}

subgraph cluster_queue {
    label="queue";
    "queue_on_list.py" [label="{queue_on_list.py|\l|}"];
"deqeue.py" [label="{deqeue.py|+ de\l\l|}"];
"__init__.py" [label="{__init__.py|\l|}"];
"queue_on_pseudo_stack.py" [label="{queue_on_pseudo_stack.py|\l|}"];
}

subgraph cluster_union_find {
    label="union_find";
    "__init__.py" [label="{__init__.py|\l|}"];
"union_find.py" [label="{union_find.py|\l|}"];
}

subgraph cluster_trie {
    label="trie";
    "__init__.py" [label="{__init__.py|\l|}"];
"trie.py" [label="{trie.py|\l|+ print_words(node, word)\l}"];
}

subgraph cluster_linked_list {
    label="linked_list";
    "doubly_linked_list.py" [label="{doubly_linked_list.py|\l|}"];
"__init__.py" [label="{__init__.py|\l|}"];
"singly_linked_list.py" [label="{singly_linked_list.py|\l|+ main()\l}"];
"swapNodes.py" [label="{swapNodes.py|\l|}"];
}

subgraph cluster_heap {
    label="heap";
    "__init__.py" [label="{__init__.py|\l|}"];
"heap.py" [label="{heap.py|\l|+ main()\l}"];
}

subgraph cluster_hashing {
    label="hashing";
    subgraph cluster_number_theory {
    label="number_theory";
    "__init__.py" [label="{__init__.py|\l|}"];
"prime_numbers.py" [label="{prime_numbers.py|\l|+ check_prime(number)\l+ next_prime(value, factor)\l}"];
}

"hash_table.py" [label="{hash_table.py|\l|}"];
"__init__.py" [label="{__init__.py|\l|}"];
"double_hash.py" [label="{double_hash.py|\l|}"];
"hash_table_with_linked_list.py" [label="{hash_table_with_linked_list.py|\l|}"];
"quadratic_probing.py" [label="{quadratic_probing.py|\l|}"];
}

subgraph cluster_stacks {
    label="stacks";
    "balanced_parentheses.py" [label="{balanced_parentheses.py|+ __author__\l\l|+ balanced_parentheses(parentheses)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"next.py" [label="{next.py|+ arr\l\l|+ printNGE(arr)\l}"];
"stock_span_problem.py" [label="{stock_span_problem.py|\l|+ calculateSpan(price, S)\l+ printArray(arr, n)\l+ main()\l}"];
"stack.py" [label="{stack.py|+ __author__\l\l|}"];
"infix_to_postfix_conversion.py" [label="{infix_to_postfix_conversion.py|+ __author__\l\l|+ is_operand(char)\l+ precedence(char)\l+ infix_to_postfix(expression)\l}"];
"simple_stack.py" [label="{simple_stack.py|\l|}"];
}

subgraph cluster_binary_tree {
    label="binary_tree";
    "lazy_segment_tree.py" [label="{lazy_segment_tree.py|\l|}"];
"binary_search_tree.py" [label="{binary_search_tree.py|\l|+ InPreOrder(curr_node)\l}"];
"segment_tree.py" [label="{segment_tree.py|\l|}"];
"__init__.py" [label="{__init__.py|\l|}"];
"AVLtree.py" [label="{AVLtree.py|\l|+ getheight(node)\l+ my_max(a, b)\l+ leftrotation(node)\l+ rightrotation(node)\l+ rlrotation(node)\l+ lrrotation(node)\l+ insert_node(node, data)\l+ getRightMost(root)\l+ getLeftMost(root)\l+ del_node(root, data)\l}"];
"fenwick_tree.py" [label="{fenwick_tree.py|\l|}"];
}

"__init__.py" [label="{__init__.py|\l|}"];
"avl.py" [label="{avl.py|+ t\l\l|}"];
"arrays.py" [label="{arrays.py|+ arr\l\l|}"];
}

subgraph cluster_machine_learning {
    label="machine_learning";
    subgraph cluster_Random_Forest_Classification {
    label="Random_Forest_Classification";
    "__init__.py" [label="{__init__.py|\l|}"];
"random_forest_classification.py" [label="{random_forest_classification.py|\l|+ main()\l}"];
}

subgraph cluster_Random_Forest_Regression {
    label="Random_Forest_Regression";
    "random_forest_regression.py" [label="{random_forest_regression.py|\l|+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
}

"linear_regression.py" [label="{linear_regression.py|\l|+ collect_dataset()\l+ run_steep_gradient_descent(data_x, data_y, len_data, alpha, theta)\l+ sum_of_square_error(data_x, data_y, len_data, theta)\l+ run_linear_regression(data_x, data_y)\l+ main()\l}"];
"logistic_regression.py" [label="{logistic_regression.py|\l|+ sigmoid_function(z)\l+ cost_function(h, y)\l+ logistic_reg(alpha, X, y, max_iterations)\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"gradient_descent.py" [label="{gradient_descent.py|+ train_data\l+ test_data\l+ parameter_vector\l+ m\l+ LEARNING_RATE\l\l|+ _error(example_no, data_set)\l+ _hypothesis_value(data_input_tuple)\l+ output(example_no, data_set)\l+ calculate_hypothesis_value(example_no, data_set)\l+ summation_of_cost_derivative(index, end)\l+ get_cost_derivative(index)\l+ run_gradient_descent()\l+ test_gradient_descent()\l}"];
"decision_tree.py" [label="{decision_tree.py|\l|+ main()\l}"];
"scoring_functions.py" [label="{scoring_functions.py|\l|+ mae(predict, actual)\l+ mse(predict, actual)\l+ rmse(predict, actual)\l+ rmsle(predict, actual)\l+ mbd(predict, actual)\l}"];
"k_means_clust.py" [label="{k_means_clust.py|+ TAG\l\l|+ get_initial_centroids(data, k, seed)\l+ centroid_pairwise_dist(X, centroids)\l+ assign_clusters(data, centroids)\l+ revise_centroids(data, k, cluster_assignment)\l+ compute_heterogeneity(data, k, centroids, cluster_assignment)\l+ plot_heterogeneity(heterogeneity, k)\l+ kmeans(data, k, initial_centroids, maxiter, record_heterogeneity, verbose)\l}"];
"perceptron.py" [label="{perceptron.py|\l|+ main()\l}"];
}

subgraph cluster_graphs {
    label="graphs";
    "dijkstra.py" [label="{dijkstra.py|\l|+ dijkstra(graph, start, end)\l+ main()\l}"];
"DFS.py" [label="{DFS.py|\l|+ dfs(graph, start)\l+ main()\l}"];
"scc_kosaraju.py" [label="{scc_kosaraju.py|\l|+ dfs(g, r, scc, component, visit, stack, u)\l+ dfs2(g, r, scc, component, visit, stack, u)\l+ kosaraju(g, r, scc, component, visit, stack, n)\l+ main()\l}"];
"kahns_algorithm_long.py" [label="{kahns_algorithm_long.py|\l|+ longestDistance(l)\l+ main()\l}"];
"minimum_spanning_tree_prims.py" [label="{minimum_spanning_tree_prims.py|\l|+ PrimsAlgorithm(l)\l+ main()\l}"];
"finding_bridges.py" [label="{finding_bridges.py|\l|+ computeBridges(l)\l+ main()\l}"];
"minimum_spanning_tree_kruskal.py" [label="{minimum_spanning_tree_kruskal.py|\l|+ find_parent(parent, i)\l+ main()\l}"];
"__init__.py" [label="{__init__.py|\l|}"];
"articulation_points.py" [label="{articulation_points.py|\l|+ computeAP(l)\l+ main()\l}"];
"a_star.py" [label="{a_star.py|\l|+ search(grid, init, goal, cost, heuristic, delta)\l+ main()\l}"];
"multi_hueristic_astar.py" [label="{multi_hueristic_astar.py|+ hueristics\l+ blocks_blk\l+ blocks_no\l+ blocks_all\l+ blocks\l+ W1\l+ W2\l+ n\l+ n_hueristic\l+ start\l+ goal\l+ t\l\l|+ consistent_hueristic(P, goal)\l+ hueristic_2(P, goal)\l+ hueristic_1(P, goal)\l+ key(start, i, goal, g_function)\l+ do_something(back_pointer, goal, start)\l+ valid(p)\l+ expand_state(s, j, visited, g_function, close_list_anchor, close_list_inad, open_list, back_pointer)\l+ make_common_ground()\l+ multi_a_star(start, goal, n_hueristic)\l}"];
"kahns_algorithm_topo.py" [label="{kahns_algorithm_topo.py|\l|+ topologicalSort(l)\l+ main()\l}"];
"check_bipartite_graph_bfs.py" [label="{check_bipartite_graph_bfs.py|\l|+ checkBipartite(l)\l+ main()\l}"];
"Directed_and_Undirected_Weighted_Graph.py" [label="{Directed_and_Undirected_Weighted_Graph.py|\l|}"];
"basic_graphs.py" [label="{basic_graphs.py|\l|+ dfs(G, s)\l+ bfs(G, s)\l+ dijk(G, s)\l+ topo(G, ind, Q)\l+ adjm()\l+ floy(A_and_n)\l+ prim(G, s)\l+ edglist()\l+ krusk(E_and_n)\l+ find_isolated_nodes(graph)\l+ main()\l}"];
"tarjans_scc.py" [label="{tarjans_scc.py|\l|+ tarjan(g)\l+ create_graph(n, edges)\l+ main()\l}"];
"BFS.py" [label="{BFS.py|\l|+ bfs(graph, start)\l+ main()\l}"];
}

"__init__.py" [label="{__init__.py|\l|}"];
"factorial_python.py" [label="{factorial_python.py|+ num\l+ factorial\l\l|}"];
"setup.py" [label="{setup.py|+ TEST_REQUIREMENTS\l+ REQUIRED\l\l|}"];
}

    "dijkstra.py" -> "sentinel_linear_search.py" [style=invis];
"__init__.py" -> "__init__.py" [style=invis];
"sentinel_linear_search.py" -> "__init__.py" [style=invis];
"__init__.py" -> "knuth_morris_pratt.py" [style=invis];
"__init__.py" -> "server.py" [style=invis];
"knuth_morris_pratt.py" -> "segmented_sieve.py" [style=invis];
"server.py" -> "test_imports.py" [style=invis];
"segmented_sieve.py" -> "__init__.py" [style=invis];
"test_imports.py" -> "covstring.py" [style=invis];
"__init__.py" -> "__init__.py" [style=invis];
"covstring.py" -> "convolution_neural_network.py" [style=invis];
"__init__.py" -> "__init__.py" [style=invis];
"convolution_neural_network.py" -> "binary_tree_traversals.py" [style=invis];
"__init__.py" -> "bisection.py" [style=invis];
"binary_tree_traversals.py" -> "integer_partition.py" [style=invis];
"bisection.py" -> "__init__.py" [style=invis];
"integer_partition.py" -> "heap_sort.py" [style=invis];
"__init__.py" -> "findingPrimes.py" [style=invis];
"heap_sort.py" -> "affine_cipher.py" [style=invis];
"findingPrimes.py" -> "matrix_multiplication_addition.py" [style=invis];
"affine_cipher.py" -> "__init__.py" [style=invis];
"matrix_multiplication_addition.py" -> "linear_regression.py" [style=invis];
"__init__.py" -> "dijkstra.py" [style=invis];
"solution.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "sol1.py" [style=invis];
"sol1.py" -> "solution.py" [style=invis];
"conftest.py" -> "test_min_cost_string_conversion.py" [style=invis];
"test_linear_search.py" -> "test_sieve_of_eratosthenes.py" [style=invis];
"test_min_cost_string_conversion.py" -> "test_sha1.py" [style=invis];
"test_sieve_of_eratosthenes.py" -> "test_dynamic_programming_floyd_warshall.py" [style=invis];
"test_sha1.py" -> "test_ford_fulkerson.py" [style=invis];
"test_dynamic_programming_floyd_warshall.py" -> "conftest.py" [style=invis];
"test_ford_fulkerson.py" -> "test_longest_common_subsequence.py" [style=invis];
"conftest.py" -> "test_basic_binary_tree.py" [style=invis];
"test_longest_common_subsequence.py" -> "conftest.py" [style=invis];
"test_basic_binary_tree.py" -> "test_fischer_yates_shuffle.py" [style=invis];
"conftest.py" -> "test_psnr.py" [style=invis];
"test_fischer_yates_shuffle.py" -> "test_affine_cipher.py" [style=invis];
"test_psnr.py" -> "test_matrix_multiplication_addition.py" [style=invis];
"test_affine_cipher.py" -> "conftest.py" [style=invis];
"lazy_segment_tree.py" -> "queue_on_list.py" [style=invis];
"dijkstra.py" -> "__init__.py" [style=invis];
"queue_on_list.py" -> "__init__.py" [style=invis];
"__init__.py" -> "doubly_linked_list.py" [style=invis];
"__init__.py" -> "__init__.py" [style=invis];
"doubly_linked_list.py" -> "hash_table.py" [style=invis];
"__init__.py" -> "balanced_parentheses.py" [style=invis];
"hash_table.py" -> "lazy_segment_tree.py" [style=invis];
"random_forest_regression.py" -> "random_forest_regression.py" [style=invis];
}
